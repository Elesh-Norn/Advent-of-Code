from collections import deque

class Grid:
    def __init__(self, height, width):
        self.height = height
        self.width = width
        self.grid = self.create_grid(height, width)
        self.dir = {"R": [0, 1],
                    "D": [1, 0],
                    "U": [-1, 0],
                    "L": [0, -1]}
        self.central_position = [height//2, width//2]
        self.last_position = [height//2, width//2]
        self.min_distance = float('inf')
        self.min_steps = float('inf')
        self.wire = set()
        self.counter = 0

    def reset_central_position(self):
        self.last_position = [self.height//2, self.width//2]
        self.wire = set()
        self.counter = 0

    def create_grid(self, height, width):
        result = []
        for y in range(height):
            row = []
            for x in range(width):
                row.append(False)
            result.append(row)
        return result

    def read_input(self, input_deque):
        one = input_deque.popleft()
        direction = one[0]
        how_much = int(one[1:])
        self.put_wire(direction, how_much)

    def manhattan(self):
        return abs(self.last_position[0] - self.central_position[0]) + \
               abs(self.last_position[1] - self.central_position[1])

    def put_wire(self, direction, how_much):
        for _ in range(how_much):
            self.counter += 1
            self.last_position[0] += self.dir[direction][0]
            self.last_position[1] += self.dir[direction][1]
            position = self.grid[self.last_position[0]][self.last_position[1]]

            if position and (self.last_position[0], self.last_position[1]) not in self.wire:
                if position + self.counter < self.min_steps:
                    self.min_steps = position + self.counter
                if self.manhattan() < self.min_distance:
                    self.min_distance = self.manhattan()
            else:
                self.grid[self.last_position[0]][self.last_position[1]] = self.counter

            self.wire.add((self.last_position[0], self.last_position[1]))

            if not self.grid[self.last_position[0]][self.last_position[1]]:
                self.grid[self.last_position[0]][self.last_position[1]] = self.counter
            elif self.counter < position:
                self.grid[self.last_position[0]][self.last_position[1]] = self.counter

board_test = Grid(50, 50)
wires = [deque(["R8","U5","L5","D3"]),
         deque(["U7","R6","D4","L4"])]
for wire in wires:
    board_test.reset_central_position()
    while wire:
        board_test.read_input(wire)

print(board_test.min_distance)
print(board_test.min_steps)
board_test = Grid(500, 500)
wires = [deque(["R75","D30","R83","U83","L12","D49","R71","U7","L72"]),
         deque(["U62", "R66", "U55", "R34", "D71", "R55", "D58", "R83"])]

for wire in wires:
    board_test.reset_central_position()
    while wire:
        board_test.read_input(wire)

print(board_test.min_distance)
print(board_test.min_steps)

board_test = Grid(500, 500)
wires = [deque(["R98","U47","R26","D63","R33","U87","L62","D20","R33","U53","R51"]),
         deque(["U98","R91","D20","R16","D67","R40","U7","R15","U6","R7"])]

for wire in wires:
    board_test.reset_central_position()
    while wire:
        board_test.read_input(wire)

print(board_test.min_distance)
print(board_test.min_steps)

board = Grid(30000, 30000)

wires_string = []
with open('input_Day_3', "r") as file:
    for x in file:
        wires_string.append(x)
wires = []
for wire in wires_string:
    wires.append(deque(wire.split(",")))

for wire in wires:
    board.reset_central_position()
    while wire:

        board.read_input(wire)

print(board.min_distance)
print(board.min_steps)

